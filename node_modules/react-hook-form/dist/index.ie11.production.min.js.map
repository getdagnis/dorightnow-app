{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues, isWeb)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value:\n      | FieldValue<TFieldValues>\n      | UnpackNestedValue<DeepPartial<TFieldValues>>\n      | string[]\n      | undefined\n      | null\n      | boolean,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current, isWeb),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return compact(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : Array.isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (!!value && keyName in value) {\n        console.warn(\n          `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends { [k: string]: unknown }[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    const defaultFieldArrayValues = get(defaultValuesRef.current, name, []);\n    const updateDirtyFieldsBaseOnDefaultValues = <U extends T>(\n      base: U,\n      target: U,\n    ) => {\n      for (const key in base) {\n        for (const innerKey in base[key]) {\n          if (\n            innerKey !== keyName &&\n            (!target[key] ||\n              !base[key] ||\n              base[key][innerKey] !== target[key][innerKey])\n          ) {\n            set(formStateRef.current.dirtyFields, `${name}[${key}]`, {\n              ...get(formStateRef.current.dirtyFields, `${name}[${key}]`, {}),\n              [innerKey]: true,\n            });\n          }\n        }\n      }\n    };\n\n    if (updatedFieldArrayValues) {\n      updateDirtyFieldsBaseOnDefaultValues(\n        defaultFieldArrayValues,\n        updatedFieldArrayValues,\n      );\n      updateDirtyFieldsBaseOnDefaultValues(\n        updatedFieldArrayValues,\n        defaultFieldArrayValues,\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends { [k: string]: unknown }[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: isFormDirty(\n        name,\n        updatedFormValues.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n      ),\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getFieldArrayValue(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: { [k: string]: unknown }[] = removeArrayAt(\n      fieldValues,\n      index,\n    );\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\nimport isFunction from './utils/isFunction';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        } else {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production' && !name) {\n        return console.warn(\n          '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n        );\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            VALUE,\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = !get(defaultValuesRef.current, name);\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [\n    name,\n    touched,\n    updateFormState,\n    shouldValidate,\n    trigger,\n    readFormStateRef,\n  ]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  const commonProps = {\n    onChange,\n    onBlur,\n    name,\n    value,\n    ref,\n  };\n\n  const props = {\n    ...rest,\n    ...commonProps,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render(commonProps)\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","SELECT","defaultResult","validResult","values","map","_a","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","target","source","isPrimitive","targetValue","sourceValue","shallowFieldsState","shouldUnregister","search","output","name_1","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","keys1_1","__values","includes","val1","val2","RegExp","validationData","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","_b","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","_c","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","entries","_l","__read","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","isWeb","copy","File","getTime","Set","data_1","Map","mode","isOnSubmit","isOnAll","isWindowUndefined","window","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","mapIds","keyName","generateId","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperty","React.useEffect","onBlur","commonProps","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","fieldArrayValuesRef","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","defaultFieldArrayValues","updateDirtyFieldsBaseOnDefaultValues","base","innerKey","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","isDirty","argC","argD","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","selected","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","payload_1","getFieldsValues","shouldSkipValidation","parentNodeName","lastIndexOf","currentError","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","refOrValidationOptions","React.useMemo","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}