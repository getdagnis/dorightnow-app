{"version":3,"file":"index.cjs.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues, isWeb)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value:\n      | FieldValue<TFieldValues>\n      | UnpackNestedValue<DeepPartial<TFieldValues>>\n      | string[]\n      | undefined\n      | null\n      | boolean,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current, isWeb),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return compact(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : Array.isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (!!value && keyName in value) {\n        console.warn(\n          `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends { [k: string]: unknown }[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    const defaultFieldArrayValues = get(defaultValuesRef.current, name, []);\n    const updateDirtyFieldsBaseOnDefaultValues = <U extends T>(\n      base: U,\n      target: U,\n    ) => {\n      for (const key in base) {\n        for (const innerKey in base[key]) {\n          if (\n            innerKey !== keyName &&\n            (!target[key] ||\n              !base[key] ||\n              base[key][innerKey] !== target[key][innerKey])\n          ) {\n            set(formStateRef.current.dirtyFields, `${name}[${key}]`, {\n              ...get(formStateRef.current.dirtyFields, `${name}[${key}]`, {}),\n              [innerKey]: true,\n            });\n          }\n        }\n      }\n    };\n\n    if (updatedFieldArrayValues) {\n      updateDirtyFieldsBaseOnDefaultValues(\n        defaultFieldArrayValues,\n        updatedFieldArrayValues,\n      );\n      updateDirtyFieldsBaseOnDefaultValues(\n        updatedFieldArrayValues,\n        defaultFieldArrayValues,\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends { [k: string]: unknown }[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: isFormDirty(\n        name,\n        updatedFormValues.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n      ),\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getFieldArrayValue(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: { [k: string]: unknown }[] = removeArrayAt(\n      fieldValues,\n      index,\n    );\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\nimport isFunction from './utils/isFunction';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        } else {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production' && !name) {\n        return console.warn(\n          '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n        );\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            VALUE,\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = !get(defaultValuesRef.current, name);\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [\n    name,\n    touched,\n    updateFormState,\n    shouldValidate,\n    trigger,\n    readFormStateRef,\n  ]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  const commonProps = {\n    onChange,\n    onBlur,\n    name,\n    value,\n    ref,\n  };\n\n  const props = {\n    ...rest,\n    ...commonProps,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render(commonProps)\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","[object Object]","deepMerge","target","source","isPrimitive","targetValue","sourceValue","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","RegExp","validationData","isValueMessage","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","window","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","mapIds","keyName","generateId","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","shouldUpdateValue","defineProperty","React.useEffect","onBlur","commonProps","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","fieldArrayValuesRef","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","defaultFieldArrayValues","updateDirtyFieldsBaseOnDefaultValues","base","innerKey","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","isDirty","argC","argD","_b","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","isSubmitSuccessful","observerRef","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","parentNodeName","lastIndexOf","currentError","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","refOrValidationOptions","React.useMemo","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}