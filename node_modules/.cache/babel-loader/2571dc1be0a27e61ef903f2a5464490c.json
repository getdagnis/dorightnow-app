{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dagnis/Documents/Github/dorightnow-app/src/components/Stopwatch/Stopwatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport ReactStopwatch from \"react-stopwatch\";\n\nconst Stopwatch = () => {\n  _s();\n\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(ReactStopwatch, {\n    seconds: 0,\n    minutes: 0,\n    hours: 0 // limit=\"00:00:10\"\n    ,\n    onChange: ({\n      hours,\n      minutes,\n      seconds\n    }) => {\n      const formatted = \"ðŸ”¥\" + hours + \":\" + minutes + \":\" + seconds;\n      document.title = formatted; // document.title =\n      // const localCounterData = localStorage.getItem(\"counterData\")\n      //   ? localStorage.getItem(\"counterData\")\n      //   : null;\n      // localCounterData &&\n      // (localCounterData.minutes > 0 || localCounterData.hours > 0)\n      //   ? console.log(\"local hours\", localCounterData.minutes)\n      //   : console.log(\"empty local storage\");\n      // const counterData = {\n      //   id: mainTask.id,\n      //   hours: hours,\n      //   minutes: minutes,\n      // };\n      // console.log(\"counterData\", {\n      //   id: mainTask.id,\n      //   hours: hours,\n      //   minutes: minutes,\n      // });\n    },\n    onCallback: () => console.log(\"Finish\"),\n    render: ({\n      formatted,\n      hours,\n      minutes,\n      seconds\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"countdown-units\",\n          children: [hours, \"h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"countdown-units\",\n          children: [minutes, \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"countdown-units\",\n          children: [seconds, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Stopwatch, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/components/Stopwatch/Stopwatch.js"],"names":["React","useEffect","ReactStopwatch","Stopwatch","hours","minutes","seconds","formatted","document","title","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,iBAA3B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtBF,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,CAAT;AAEA,sBACE,QAAC,cAAD;AACE,IAAA,OAAO,EAAE,CADX;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,KAAK,EAAE,CAHT,CAIE;AAJF;AAKE,IAAA,QAAQ,EAAE,CAAC;AAAEG,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,KAAD,KAAiC;AACzC,YAAMC,SAAS,GAAG,OAAOH,KAAP,GAAe,GAAf,GAAqBC,OAArB,GAA+B,GAA/B,GAAqCC,OAAvD;AACAE,MAAAA,QAAQ,CAACC,KAAT,GAAiBF,SAAjB,CAFyC,CAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA1BH;AA2BE,IAAA,UAAU,EAAE,MAAMG,OAAO,CAACC,GAAR,CAAY,QAAZ,CA3BpB;AA4BE,IAAA,MAAM,EAAE,CAAC;AAAEJ,MAAAA,SAAF;AAAaH,MAAAA,KAAb;AAAoBC,MAAAA,OAApB;AAA6BC,MAAAA;AAA7B,KAAD,KAA4C;AAClD,0BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA,qBAAmCF,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA,qBAAmCC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA,qBAAmCC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAOD;AApCH;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA3CD;;GAAMH,S;;KAAAA,S;AA6CN,eAAeA,SAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactStopwatch from \"react-stopwatch\";\n\nconst Stopwatch = () => {\n  useEffect(() => {});\n\n  return (\n    <ReactStopwatch\n      seconds={0}\n      minutes={0}\n      hours={0}\n      // limit=\"00:00:10\"\n      onChange={({ hours, minutes, seconds }) => {\n        const formatted = \"ðŸ”¥\" + hours + \":\" + minutes + \":\" + seconds;\n        document.title = formatted;\n        // document.title =\n        // const localCounterData = localStorage.getItem(\"counterData\")\n        //   ? localStorage.getItem(\"counterData\")\n        //   : null;\n        // localCounterData &&\n        // (localCounterData.minutes > 0 || localCounterData.hours > 0)\n        //   ? console.log(\"local hours\", localCounterData.minutes)\n        //   : console.log(\"empty local storage\");\n        // const counterData = {\n        //   id: mainTask.id,\n        //   hours: hours,\n        //   minutes: minutes,\n        // };\n        // console.log(\"counterData\", {\n        //   id: mainTask.id,\n        //   hours: hours,\n        //   minutes: minutes,\n        // });\n      }}\n      onCallback={() => console.log(\"Finish\")}\n      render={({ formatted, hours, minutes, seconds }) => {\n        return (\n          <div className=\"countdown\">\n            <span className=\"countdown-units\">{hours}h</span>\n            <span className=\"countdown-units\">{minutes}m</span>\n            <span className=\"countdown-units\">{seconds}s</span>\n          </div>\n        );\n      }}\n    />\n  );\n};\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}