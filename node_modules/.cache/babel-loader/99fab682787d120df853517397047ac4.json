{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dagnis/Documents/Github/dorightnow-app/src/components/Feedback/Feedback.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ButtonSmall from \"../ButtonSmall/ButtonSmall\";\nimport \"./Feedback.css\";\nimport feedbackIcon from \"./feedback.svg\";\n\nfunction Feedback() {\n  _s();\n\n  const [feedbackOpen, setFeedbackOpen] = useState(false);\n  const [feedbackSent, setFeedbackSent] = useState(false);\n\n  function clickHandle() {\n    setFeedbackOpen(false);\n  }\n\n  function clickHandleSent() {\n    setFeedbackOpen(false);\n    setFeedbackSent(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback\",\n    children: feedbackOpen ? /*#__PURE__*/_jsxDEV(FeedbackOpen, {\n      feedbackOpen: feedbackOpen,\n      clickHandleSent: clickHandleSent,\n      clickHandle: clickHandle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-closed\",\n      onClick: () => {\n        setFeedbackOpen(true);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"feedback-icon\",\n        src: feedbackIcon,\n        alt: \"Give feedback!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), feedbackSent ? \"Thanks! Feedback sent.\" : \"Played around? Give FEEDBACK!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feedback, \"MxXkEsBQdicn4VtvTJMN/syHvRg=\");\n\n_c = Feedback;\n\nconst FeedbackOpen = props => {\n  _s2();\n\n  const {\n    clickHandle,\n    clickHandleSent\n  } = props;\n  const [formState, setFormState] = useState({\n    feedbackText: \"\"\n  });\n  let ref = useRef();\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  const encode = data => {\n    return Object.keys(data).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key])).join(\"&\");\n  };\n\n  const handleChange = e => {\n    setFormState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      handleSubmit(e);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch(\"/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: encode({\n        \"form-name\": \"feedback\",\n        ...formState\n      })\n    }).then(() => clickHandleSent()).catch(error => alert(\"Error! Sorry, form not sent...\", error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-open\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"feedback-h3\",\n      children: \"Help me build this app into one you'll love!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), \"Please leave your feedback and be part of the process \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 61\n    }, this), \"(also your email if you want an answer):\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"feedback-form\",\n      name: \"feedback\",\n      action: \"/feedback\",\n      method: \"post\",\n      \"data-netlify\": \"true\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: \"form-name\",\n        value: \"feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"task-input form-input\",\n        name: \"feedbackText\",\n        value: formState.feedbackText,\n        onChange: handleChange,\n        onKeyPress: handleKeyPress,\n        id: \"feedback-text\",\n        cols: \"30\",\n        rows: \"3\",\n        ref: e => {\n          ref.current = e;\n        },\n        placeholder: \"Things I like... things I don't like... features I miss...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonSmall, {\n        title: \"submit\",\n        size: \"large\",\n        type: \"submit\",\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-btn-hide\",\n      onClick: () => {\n        clickHandle();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(FeedbackOpen, \"MsElj7lgTOsPIPNtIFCQwDGKVho=\");\n\n_c2 = FeedbackOpen;\nexport default Feedback;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Feedback\");\n$RefreshReg$(_c2, \"FeedbackOpen\");","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/components/Feedback/Feedback.js"],"names":["React","useState","useEffect","useRef","ButtonSmall","Feedback","feedbackOpen","setFeedbackOpen","feedbackSent","setFeedbackSent","clickHandle","clickHandleSent","feedbackIcon","FeedbackOpen","props","formState","setFormState","feedbackText","ref","current","focus","encode","data","Object","keys","map","key","encodeURIComponent","join","handleChange","e","target","name","value","handleKeyPress","shiftKey","handleSubmit","preventDefault","fetch","method","headers","body","then","catch","error","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nimport ButtonSmall from \"../ButtonSmall/ButtonSmall\";\nimport \"./Feedback.css\";\nimport feedbackIcon from \"./feedback.svg\";\n\nfunction Feedback() {\n  const [feedbackOpen, setFeedbackOpen] = useState(false);\n  const [feedbackSent, setFeedbackSent] = useState(false);\n\n  function clickHandle() {\n    setFeedbackOpen(false);\n  }\n\n  function clickHandleSent() {\n    setFeedbackOpen(false);\n    setFeedbackSent(true);\n  }\n\n  return (\n    <div className=\"feedback\">\n      {feedbackOpen ? (\n        <FeedbackOpen\n          feedbackOpen={feedbackOpen}\n          clickHandleSent={clickHandleSent}\n          clickHandle={clickHandle}\n        />\n      ) : (\n        <div\n          className=\"feedback-closed\"\n          onClick={() => {\n            setFeedbackOpen(true);\n          }}\n        >\n          <img\n            className=\"feedback-icon\"\n            src={feedbackIcon}\n            alt=\"Give feedback!\"\n          />\n          {feedbackSent\n            ? \"Thanks! Feedback sent.\"\n            : \"Played around? Give FEEDBACK!\"}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst FeedbackOpen = (props) => {\n  const { clickHandle, clickHandleSent } = props;\n  const [formState, setFormState] = useState({\n    feedbackText: \"\",\n  });\n  let ref = useRef();\n\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  const encode = (data) => {\n    return Object.keys(data)\n      .map(\n        (key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key])\n      )\n      .join(\"&\");\n  };\n\n  const handleChange = (e) => {\n    setFormState({ [e.target.name]: e.target.value });\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      handleSubmit(e);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetch(\"/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: encode({ \"form-name\": \"feedback\", ...formState }),\n    })\n      .then(() => clickHandleSent())\n      .catch((error) => alert(\"Error! Sorry, form not sent...\", error));\n  };\n\n  return (\n    <div className=\"feedback-open\">\n      <h3 className=\"feedback-h3\">\n        Help me build this app into one you'll love!\n      </h3>\n      Please leave your feedback and be part of the process <br />\n      (also your email if you want an answer):\n      <form\n        onSubmit={handleSubmit}\n        className=\"feedback-form\"\n        name=\"feedback\"\n        action=\"/feedback\"\n        method=\"post\"\n        data-netlify=\"true\"\n      >\n        <input type=\"hidden\" name=\"form-name\" value=\"feedback\" />\n        <textarea\n          className=\"task-input form-input\"\n          name=\"feedbackText\"\n          value={formState.feedbackText}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          id=\"feedback-text\"\n          cols=\"30\"\n          rows=\"3\"\n          ref={(e) => {\n            ref.current = e;\n          }}\n          placeholder=\"Things I like... things I don't like... features I miss...\"\n          required\n        ></textarea>\n        <ButtonSmall title=\"submit\" size=\"large\" type=\"submit\" color=\"red\" />\n      </form>\n      <div\n        className=\"task-btn-hide\"\n        onClick={() => {\n          clickHandle();\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default Feedback;\n"]},"metadata":{},"sourceType":"module"}