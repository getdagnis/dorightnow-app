{"ast":null,"code":"import { ADD_TASK, DELETE_TASK, EDIT_TASK } from \"./actions\";\nimport { fetchedTasks } from \"./tasks\";\nconst initialState = {\n  tasks: fetchedTasks,\n  user: \"dagnis\"\n};\n\nconst taskReducer = (state = initialState, action) => {\n  let updatedTasks;\n  let updatedTaskId;\n\n  switch (action.type) {\n    case ADD_TASK:\n      updatedTasks = [...state.tasks];\n      updatedItemIndex = updatedCart.findIndex(item => item.id === action.payload.id);\n\n      if (updatedItemIndex < 0) {\n        updatedCart.push({ ...action.payload,\n          quantity: 1\n        });\n      } else {\n        const updatedItem = { ...updatedCart[updatedItemIndex]\n        };\n        updatedItem.quantity++;\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n\n      return { ...state,\n        cart: updatedCart\n      };\n\n    case DELETE_TASK:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(item => item.id === action.payload);\n      const updatedItem = { ...updatedCart[updatedItemIndex]\n      };\n      updatedItem.quantity--;\n\n      if (updatedItem.quantity <= 0) {\n        updatedCart.splice(updatedItemIndex, 1);\n      } else {\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n\n      return { ...state,\n        cart: updatedCart\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default taskReducer;","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/reducer/reducers.js"],"names":["ADD_TASK","DELETE_TASK","EDIT_TASK","fetchedTasks","initialState","tasks","user","taskReducer","state","action","updatedTasks","updatedTaskId","type","updatedItemIndex","updatedCart","findIndex","item","id","payload","push","quantity","updatedItem","cart","splice"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,WAAjD;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEF,YADY;AAEnBG,EAAAA,IAAI,EAAE;AAFa,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,MAAIC,YAAJ;AACA,MAAIC,aAAJ;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAKZ,QAAL;AACEU,MAAAA,YAAY,GAAG,CAAC,GAAGF,KAAK,CAACH,KAAV,CAAf;AACAQ,MAAAA,gBAAgB,GAAGC,WAAW,CAACC,SAAZ,CAChBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACS,OAAP,CAAeD,EADpB,CAAnB;;AAIA,UAAIJ,gBAAgB,GAAG,CAAvB,EAA0B;AACxBC,QAAAA,WAAW,CAACK,IAAZ,CAAiB,EAAE,GAAGV,MAAM,CAACS,OAAZ;AAAqBE,UAAAA,QAAQ,EAAE;AAA/B,SAAjB;AACD,OAFD,MAEO;AACL,cAAMC,WAAW,GAAG,EAClB,GAAGP,WAAW,CAACD,gBAAD;AADI,SAApB;AAGAQ,QAAAA,WAAW,CAACD,QAAZ;AACAN,QAAAA,WAAW,CAACD,gBAAD,CAAX,GAAgCQ,WAAhC;AACD;;AACD,aAAO,EAAE,GAAGb,KAAL;AAAYc,QAAAA,IAAI,EAAER;AAAlB,OAAP;;AAEF,SAAKb,WAAL;AACEa,MAAAA,WAAW,GAAG,CAAC,GAAGN,KAAK,CAACc,IAAV,CAAd;AACAT,MAAAA,gBAAgB,GAAGC,WAAW,CAACC,SAAZ,CAChBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACS,OADZ,CAAnB;AAIA,YAAMG,WAAW,GAAG,EAClB,GAAGP,WAAW,CAACD,gBAAD;AADI,OAApB;AAGAQ,MAAAA,WAAW,CAACD,QAAZ;;AACA,UAAIC,WAAW,CAACD,QAAZ,IAAwB,CAA5B,EAA+B;AAC7BN,QAAAA,WAAW,CAACS,MAAZ,CAAmBV,gBAAnB,EAAqC,CAArC;AACD,OAFD,MAEO;AACLC,QAAAA,WAAW,CAACD,gBAAD,CAAX,GAAgCQ,WAAhC;AACD;;AAED,aAAO,EAAE,GAAGb,KAAL;AAAYc,QAAAA,IAAI,EAAER;AAAlB,OAAP;;AACF;AACE,aAAON,KAAP;AApCJ;AAsCD,CAzCD;;AA2CA,eAAeD,WAAf","sourcesContent":["import { ADD_TASK, DELETE_TASK, EDIT_TASK } from \"./actions\";\nimport { fetchedTasks } from \"./tasks\";\n\nconst initialState = {\n  tasks: fetchedTasks,\n  user: \"dagnis\",\n};\n\nconst taskReducer = (state = initialState, action) => {\n  let updatedTasks;\n  let updatedTaskId;\n  switch (action.type) {\n    case ADD_TASK:\n      updatedTasks = [...state.tasks];\n      updatedItemIndex = updatedCart.findIndex(\n        (item) => item.id === action.payload.id\n      );\n\n      if (updatedItemIndex < 0) {\n        updatedCart.push({ ...action.payload, quantity: 1 });\n      } else {\n        const updatedItem = {\n          ...updatedCart[updatedItemIndex],\n        };\n        updatedItem.quantity++;\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n      return { ...state, cart: updatedCart };\n\n    case DELETE_TASK:\n      updatedCart = [...state.cart];\n      updatedItemIndex = updatedCart.findIndex(\n        (item) => item.id === action.payload\n      );\n\n      const updatedItem = {\n        ...updatedCart[updatedItemIndex],\n      };\n      updatedItem.quantity--;\n      if (updatedItem.quantity <= 0) {\n        updatedCart.splice(updatedItemIndex, 1);\n      } else {\n        updatedCart[updatedItemIndex] = updatedItem;\n      }\n\n      return { ...state, cart: updatedCart };\n    default:\n      return state;\n  }\n};\n\nexport default taskReducer;\n"]},"metadata":{},"sourceType":"module"}