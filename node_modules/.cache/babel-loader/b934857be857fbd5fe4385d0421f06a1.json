{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dagnis/Documents/Github/dorightnow-app/src/components/Stopwatch/Stopwatch.js\";\nimport React from \"react\";\nimport ReactStopwatch from \"react-stopwatch\";\n\nconst Stopwatch = () => /*#__PURE__*/_jsxDEV(ReactStopwatch, {\n  seconds: 0,\n  minutes: 0,\n  hours: 0 // limit=\"00:00:10\"\n  ,\n  onChange: ({\n    hours,\n    minutes,\n    seconds\n  }) => {// const localCounterData = localStorage.getItem(\"counterData\")\n    //   ? localStorage.getItem(\"counterData\")\n    //   : null;\n    // localCounterData &&\n    // (localCounterData.minutes > 0 || localCounterData.hours > 0)\n    //   ? console.log(\"local hours\", localCounterData.minutes)\n    //   : console.log(\"empty local storage\");\n    // const counterData = {\n    //   id: mainTask.id,\n    //   hours: hours,\n    //   minutes: minutes,\n    // };\n    // console.log(\"counterData\", {\n    //   id: mainTask.id,\n    //   hours: hours,\n    //   minutes: minutes,\n    // });\n  },\n  onCallback: () => console.log(\"Finish\"),\n  render: ({\n    formatted,\n    hours,\n    minutes,\n    seconds\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"countdown-units\",\n        children: [hours, \"h\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"countdown-units\",\n        children: [minutes, \"m\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"countdown-units\",\n        children: [seconds, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n\n_c = Stopwatch;\nexport default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/components/Stopwatch/Stopwatch.js"],"names":["React","ReactStopwatch","Stopwatch","hours","minutes","seconds","console","log","formatted"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;;AAEA,MAAMC,SAAS,GAAG,mBAChB,QAAC,cAAD;AACE,EAAA,OAAO,EAAE,CADX;AAEE,EAAA,OAAO,EAAE,CAFX;AAGE,EAAA,KAAK,EAAE,CAHT,CAIE;AAJF;AAKE,EAAA,QAAQ,EAAE,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,GAAD,KAAiC,CACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAvBH;AAwBE,EAAA,UAAU,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,QAAZ,CAxBpB;AAyBE,EAAA,MAAM,EAAE,CAAC;AAAEC,IAAAA,SAAF;AAAaL,IAAAA,KAAb;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,GAAD,KAA4C;AAClD,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA,mBAAmCF,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA,mBAAmCC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA,mBAAmCC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;AAjCH;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMH,S;AAsCN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\nimport ReactStopwatch from \"react-stopwatch\";\n\nconst Stopwatch = () => (\n  <ReactStopwatch\n    seconds={0}\n    minutes={0}\n    hours={0}\n    // limit=\"00:00:10\"\n    onChange={({ hours, minutes, seconds }) => {\n      // const localCounterData = localStorage.getItem(\"counterData\")\n      //   ? localStorage.getItem(\"counterData\")\n      //   : null;\n      // localCounterData &&\n      // (localCounterData.minutes > 0 || localCounterData.hours > 0)\n      //   ? console.log(\"local hours\", localCounterData.minutes)\n      //   : console.log(\"empty local storage\");\n      // const counterData = {\n      //   id: mainTask.id,\n      //   hours: hours,\n      //   minutes: minutes,\n      // };\n      // console.log(\"counterData\", {\n      //   id: mainTask.id,\n      //   hours: hours,\n      //   minutes: minutes,\n      // });\n    }}\n    onCallback={() => console.log(\"Finish\")}\n    render={({ formatted, hours, minutes, seconds }) => {\n      return (\n        <div className=\"countdown\">\n          <span className=\"countdown-units\">{hours}h</span>\n          <span className=\"countdown-units\">{minutes}m</span>\n          <span className=\"countdown-units\">{seconds}s</span>\n        </div>\n      );\n    }}\n  />\n);\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}