{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dagnis/Documents/Github/dorightnow-app/src/components/TaskList/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./TaskList.css\";\nimport Task from \"../Task/Task\";\nimport { TasksContext } from \"../../context/context\";\n\nconst TaskList = props => {\n  _s();\n\n  const {\n    listType\n  } = props;\n  const {\n    dispatch,\n    state\n  } = useContext(TasksContext);\n  let {\n    tasks\n  } = state; // FORCES TASK LIST TO RE-RENDER WHEN TASKS CHANGE (are dragged and dropped around)\n\n  const [statefulTasks, updateStatefulTasks] = useState(tasks);\n  const thisListTasks = tasks.filter(t => t.type === listType);\n  const otherTasks = tasks.filter(t => t.type !== listType);\n  let draggedElementId = null;\n\n  function handleDragStart(props) {\n    draggedElementId = props.draggableId;\n    console.log(\"ðŸš€ handleDragStart ~ props\", draggedElementId);\n    window.addEventListener(\"mouseup\", droppedOutside);\n  }\n\n  useEffect(data => {\n    updateStatefulTasks(tasks);\n  }, statefulTasks);\n\n  function droppedOutside(e) {\n    if (e.target.parentElement.classList.contains(\"main-task-empty\") || e.target.classList.contains(\"main-task-empty\")) {\n      console.log(\"ðŸš¨ dropped on main task!\");\n      console.log(\"ðŸš€ handleDragStart ~ props\", draggedElementId);\n      dispatch({\n        type: \"CLEAR_MAIN_TASK\",\n        payload: draggedElementId\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_MAIN_TASK\",\n          payload: draggedElementId\n        });\n      }, 0);\n      setTimeout(() => {\n        dispatch({\n          type: \"HIDE_LEFT_SIDE\",\n          payload: \"hide\"\n        });\n        dispatch({\n          type: \"HIDE_RIGHT_SIDE\",\n          payload: \"hide\"\n        });\n      }, 500);\n    }\n\n    if (e.target.classList.contains(\"right-side-marker\")) {\n      console.log(\"ðŸš¨ dropped on RIGHT SIDE!\");\n      dispatch({\n        type: \"MAIN_TASK_DONE\",\n        payload: {\n          taskId: draggedElementId,\n          action: \"done\"\n        }\n      });\n    }\n\n    if (e.target.classList.contains(\"left-side-marker\")) {\n      console.log(\"ðŸš¨ dropped on LEFT SIDE!\");\n      dispatch({\n        type: \"MAIN_TASK_DONE\",\n        payload: {\n          taskId: draggedElementId,\n          action: \"todo\"\n        }\n      });\n    }\n\n    window.removeEventListener(\"mouseup\", droppedOutside);\n  }\n\n  function handleDragEnd(result) {\n    if (!result.destination) {\n      console.log(\"result\", result);\n      return;\n    }\n\n    const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n    thisListTasks.splice(result.destination.index, 0, reorderedItem);\n    const newTasks = [...thisListTasks, ...otherTasks];\n    console.log(\"ðŸš€ ~ newTasks\", newTasks);\n    dispatch({\n      type: \"UPDATE_TASK_LIST\",\n      payload: newTasks\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    onDragStart: handleDragStart,\n    children: thisListTasks && thisListTasks.length > 0 ? /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: listType,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        className: \"task-list\",\n        children: [thisListTasks.map((t, index) => {\n          let delay = thisListTasks.indexOf(t) + 2;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: t.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(Task, {\n              delay: delay,\n              task: t,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              draggableRef: provided.innerRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 23\n            }, this)\n          }, t.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 19\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : listType === \"done\" ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"no-tasks\",\n      children: \"No tasks here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"no-tasks\",\n      children: \"No tasks added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskList, \"7fx/DKKZNFX0Zy0yY18Ipyi+Gio=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/components/TaskList/TaskList.js"],"names":["React","useContext","useEffect","useState","DragDropContext","Droppable","Draggable","Task","TasksContext","TaskList","props","listType","dispatch","state","tasks","statefulTasks","updateStatefulTasks","thisListTasks","filter","t","type","otherTasks","draggedElementId","handleDragStart","draggableId","console","log","window","addEventListener","droppedOutside","data","e","target","parentElement","classList","contains","payload","setTimeout","taskId","action","removeEventListener","handleDragEnd","result","destination","reorderedItem","splice","source","index","newTasks","length","provided","innerRef","droppableProps","map","delay","indexOf","id","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nimport \"./TaskList.css\";\nimport Task from \"../Task/Task\";\nimport { TasksContext } from \"../../context/context\";\n\nconst TaskList = (props) => {\n  const { listType } = props;\n  const { dispatch, state } = useContext(TasksContext);\n  let { tasks } = state;\n\n  // FORCES TASK LIST TO RE-RENDER WHEN TASKS CHANGE (are dragged and dropped around)\n  const [statefulTasks, updateStatefulTasks] = useState(tasks);\n\n  const thisListTasks = tasks.filter((t) => t.type === listType);\n  const otherTasks = tasks.filter((t) => t.type !== listType);\n  let draggedElementId = null;\n\n  function handleDragStart(props) {\n    draggedElementId = props.draggableId;\n    console.log(\"ðŸš€ handleDragStart ~ props\", draggedElementId);\n\n    window.addEventListener(\"mouseup\", droppedOutside);\n  }\n\n  useEffect((data) => {\n    updateStatefulTasks(tasks);\n  }, statefulTasks);\n\n  function droppedOutside(e) {\n    if (\n      e.target.parentElement.classList.contains(\"main-task-empty\") ||\n      e.target.classList.contains(\"main-task-empty\")\n    ) {\n      console.log(\"ðŸš¨ dropped on main task!\");\n      console.log(\"ðŸš€ handleDragStart ~ props\", draggedElementId);\n      dispatch({ type: \"CLEAR_MAIN_TASK\", payload: draggedElementId });\n\n      setTimeout(() => {\n        dispatch({ type: \"SET_MAIN_TASK\", payload: draggedElementId });\n      }, 0);\n      setTimeout(() => {\n        dispatch({ type: \"HIDE_LEFT_SIDE\", payload: \"hide\" });\n        dispatch({ type: \"HIDE_RIGHT_SIDE\", payload: \"hide\" });\n      }, 500);\n    }\n    if (e.target.classList.contains(\"right-side-marker\")) {\n      console.log(\"ðŸš¨ dropped on RIGHT SIDE!\");\n      dispatch({\n        type: \"MAIN_TASK_DONE\",\n        payload: { taskId: draggedElementId, action: \"done\" },\n      });\n    }\n    if (e.target.classList.contains(\"left-side-marker\")) {\n      console.log(\"ðŸš¨ dropped on LEFT SIDE!\");\n      dispatch({\n        type: \"MAIN_TASK_DONE\",\n        payload: { taskId: draggedElementId, action: \"todo\" },\n      });\n    }\n    window.removeEventListener(\"mouseup\", droppedOutside);\n  }\n\n  function handleDragEnd(result) {\n    if (!result.destination) {\n      console.log(\"result\", result);\n\n      return;\n    }\n    const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n    thisListTasks.splice(result.destination.index, 0, reorderedItem);\n\n    const newTasks = [...thisListTasks, ...otherTasks];\n    console.log(\"ðŸš€ ~ newTasks\", newTasks);\n\n    dispatch({ type: \"UPDATE_TASK_LIST\", payload: newTasks });\n  }\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>\n      {thisListTasks && thisListTasks.length > 0 ? (\n        <Droppable droppableId={listType}>\n          {(provided) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"task-list\"\n            >\n              {thisListTasks.map((t, index) => {\n                let delay = thisListTasks.indexOf(t) + 2;\n                return (\n                  <Draggable key={t.id} draggableId={t.id} index={index}>\n                    {(provided) => (\n                      <Task\n                        delay={delay}\n                        task={t}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        draggableRef={provided.innerRef}\n                      />\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      ) : listType === \"done\" ? (\n        <h3 className=\"no-tasks\">No tasks here</h3>\n      ) : (\n        <h3 className=\"no-tasks\">No tasks added</h3>\n      )}\n    </DragDropContext>\n  );\n};\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}