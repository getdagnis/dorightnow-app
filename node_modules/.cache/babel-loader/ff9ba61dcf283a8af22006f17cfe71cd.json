{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dagnis.skurbe/Github/dorightnow-app/src/components/TaskList/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./TaskList.css\";\nimport Task from \"../Task/Task\";\nimport { TasksContext } from \"../../context/context\";\n\nconst TaskList = props => {\n  _s();\n\n  const {\n    listType\n  } = props;\n  const {\n    dispatch,\n    state\n  } = useContext(TasksContext);\n  let {\n    tasks\n  } = state;\n  const [currentlyDragged, setCurrentlyDragged] = useState(null);\n  const thisListTasks = tasks.filter(t => t.type === listType);\n  const otherTasks = tasks.filter(t => t.type !== listType);\n  let draggedElementId = null;\n\n  function handleDragStart(props) {\n    draggedElementId = props.draggableId;\n    console.log(\"🚀 handleDragStart ~ props\", draggedElementId);\n    setCurrentlyDragged(draggedElementId);\n    setTimeout(() => {\n      window.addEventListener(\"mouseup\", droppedOutside);\n    }, 0);\n  }\n\n  function droppedOutside(e) {\n    console.log(\"🏁 handlefinish ~ props\", draggedElementId);\n    let newTasks = [];\n\n    if (e.target.tagName === \"HTML\") {\n      return window.removeEventListener(\"mouseup\", droppedOutside);\n    } else if (e.target.parentElement.classList.contains(\"main-task-empty\") || e.target.classList.contains(\"main-task-empty\")) {\n      console.log(\"🚨 dropped on main task!\");\n      console.log(\"handleDragStart ~ props\", draggedElementId);\n      dispatch({\n        type: \"CLEAR_MAIN_TASK\",\n        payload: draggedElementId\n      });\n      setTimeout(() => {\n        dispatch({\n          type: \"SET_MAIN_TASK\",\n          payload: draggedElementId\n        });\n      }, 0);\n      setTimeout(() => {\n        dispatch({\n          type: \"HIDE_LEFT_SIDE\",\n          payload: \"hide\"\n        });\n        dispatch({\n          type: \"HIDE_RIGHT_SIDE\",\n          payload: \"hide\"\n        });\n      }, 500);\n    } // MOVE FROM LEFT TO RIGHT\n    else if (e.target.classList.contains(\"right-side-marker\")) {\n        console.log(\"🚨 dropped on RIGHT SIDE!\"); // REORDER TASKS AFTER DRAG'N'DROPPING THEM\n        // const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n        // thisListTasks.splice(result.destination.index, 0, reorderedItem);\n        // newTasks = [...thisListTasks, ...otherTasks];\n\n        dispatch({\n          type: \"MAIN_TASK_DONE\",\n          payload: {\n            taskId: draggedElementId,\n            action: \"done\"\n          }\n        });\n      } // MOVE FROM DONE BACK TO LEFT\n      else if (e.target.classList.contains(\"left-side-marker\")) {\n          console.log(\"🚨 dropped on LEFT SIDE!\");\n          dispatch({\n            type: \"MAIN_TASK_DONE\",\n            payload: {\n              taskId: draggedElementId,\n              action: \"todo\"\n            }\n          });\n        } else return window.removeEventListener(\"mouseup\", droppedOutside);\n\n    window.removeEventListener(\"mouseup\", droppedOutside);\n  }\n\n  function handleDragEnd(result) {\n    if (!result.destination) {\n      return;\n    } // REORDER TASKS AFTER DRAG'N'DROPPING THEM\n\n\n    const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n    thisListTasks.splice(result.destination.index, 0, reorderedItem);\n    const newTasks = [...thisListTasks, ...otherTasks];\n    dispatch({\n      type: \"UPDATE_TASK_LIST\",\n      payload: newTasks\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    onBeforeDragStart: handleDragStart,\n    children: thisListTasks && thisListTasks.length > 0 ? /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: listType,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        className: \"task-list\",\n        children: [thisListTasks.map((t, index) => {\n          let delay = thisListTasks.indexOf(t) + 2;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: t.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(Task, {\n              delay: delay,\n              task: t,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              ref: provided.innerRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 23\n            }, this)\n          }, t.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this) : listType === \"done\" ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"no-tasks\",\n      children: \"No tasks here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"no-tasks\",\n      children: \"No tasks added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskList, \"I9YwHrnfaVoexdwNeDVhd6d/xnA=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/dagnis.skurbe/Github/dorightnow-app/src/components/TaskList/TaskList.js"],"names":["React","useContext","useState","DragDropContext","Droppable","Draggable","Task","TasksContext","TaskList","props","listType","dispatch","state","tasks","currentlyDragged","setCurrentlyDragged","thisListTasks","filter","t","type","otherTasks","draggedElementId","handleDragStart","draggableId","console","log","setTimeout","window","addEventListener","droppedOutside","e","newTasks","target","tagName","removeEventListener","parentElement","classList","contains","payload","taskId","action","handleDragEnd","result","destination","reorderedItem","splice","source","index","length","provided","innerRef","droppableProps","map","delay","indexOf","id","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nimport \"./TaskList.css\";\nimport Task from \"../Task/Task\";\nimport { TasksContext } from \"../../context/context\";\n\nconst TaskList = (props) => {\n  const { listType } = props;\n  const { dispatch, state } = useContext(TasksContext);\n  let { tasks } = state;\n  const [currentlyDragged, setCurrentlyDragged] = useState(null);\n\n  const thisListTasks = tasks.filter((t) => t.type === listType);\n  const otherTasks = tasks.filter((t) => t.type !== listType);\n  let draggedElementId = null;\n\n  function handleDragStart(props) {\n    draggedElementId = props.draggableId;\n    console.log(\"🚀 handleDragStart ~ props\", draggedElementId);\n    setCurrentlyDragged(draggedElementId);\n    setTimeout(() => {\n      window.addEventListener(\"mouseup\", droppedOutside);\n    }, 0);\n  }\n\n  function droppedOutside(e) {\n    console.log(\"🏁 handlefinish ~ props\", draggedElementId);\n\n    let newTasks = [];\n    if (e.target.tagName === \"HTML\") {\n      return window.removeEventListener(\"mouseup\", droppedOutside);\n    } else if (\n      e.target.parentElement.classList.contains(\"main-task-empty\") ||\n      e.target.classList.contains(\"main-task-empty\")\n    ) {\n      console.log(\"🚨 dropped on main task!\");\n      console.log(\"handleDragStart ~ props\", draggedElementId);\n      dispatch({ type: \"CLEAR_MAIN_TASK\", payload: draggedElementId });\n\n      setTimeout(() => {\n        dispatch({ type: \"SET_MAIN_TASK\", payload: draggedElementId });\n      }, 0);\n      setTimeout(() => {\n        dispatch({ type: \"HIDE_LEFT_SIDE\", payload: \"hide\" });\n        dispatch({ type: \"HIDE_RIGHT_SIDE\", payload: \"hide\" });\n      }, 500);\n    }\n    // MOVE FROM LEFT TO RIGHT\n    else if (e.target.classList.contains(\"right-side-marker\")) {\n      console.log(\"🚨 dropped on RIGHT SIDE!\");\n      // REORDER TASKS AFTER DRAG'N'DROPPING THEM\n      // const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n      // thisListTasks.splice(result.destination.index, 0, reorderedItem);\n      // newTasks = [...thisListTasks, ...otherTasks];\n\n      dispatch({\n        type: \"MAIN_TASK_DONE\",\n        payload: { taskId: draggedElementId, action: \"done\" },\n      });\n    } // MOVE FROM DONE BACK TO LEFT\n    else if (e.target.classList.contains(\"left-side-marker\")) {\n      console.log(\"🚨 dropped on LEFT SIDE!\");\n      dispatch({\n        type: \"MAIN_TASK_DONE\",\n        payload: { taskId: draggedElementId, action: \"todo\" },\n      });\n    } else return window.removeEventListener(\"mouseup\", droppedOutside);\n\n    window.removeEventListener(\"mouseup\", droppedOutside);\n  }\n\n  function handleDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n    // REORDER TASKS AFTER DRAG'N'DROPPING THEM\n    const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n    thisListTasks.splice(result.destination.index, 0, reorderedItem);\n    const newTasks = [...thisListTasks, ...otherTasks];\n\n    dispatch({ type: \"UPDATE_TASK_LIST\", payload: newTasks });\n  }\n\n  return (\n    <DragDropContext\n      onDragEnd={handleDragEnd}\n      onBeforeDragStart={handleDragStart}\n    >\n      {thisListTasks && thisListTasks.length > 0 ? (\n        <Droppable droppableId={listType}>\n          {(provided) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"task-list\"\n            >\n              {thisListTasks.map((t, index) => {\n                let delay = thisListTasks.indexOf(t) + 2;\n                return (\n                  <Draggable key={t.id} draggableId={t.id} index={index}>\n                    {(provided) => (\n                      <Task\n                        delay={delay}\n                        task={t}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                      />\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      ) : listType === \"done\" ? (\n        <h3 className=\"no-tasks\">No tasks here</h3>\n      ) : (\n        <h3 className=\"no-tasks\">No tasks added</h3>\n      )}\n    </DragDropContext>\n  );\n};\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}