{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dagnis/Documents/Github/dorightnow-app/src/components/TaskList/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./TaskList.css\";\nimport Task from \"../Task/Task\";\nimport { TasksContext } from \"../../context/context\";\n\nconst TaskList = props => {\n  _s();\n\n  const {\n    listType\n  } = props;\n  const {\n    dispatch,\n    state\n  } = useContext(TasksContext);\n  let {\n    tasks\n  } = state;\n  const thisListTasks = tasks.filter(t => t.type === listType);\n  const otherTasks = tasks.filter(t => t.type !== listType);\n\n  function handleDragEnd(result) {\n    const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n    thisListTasks.splice(result.destination.index, 0, reorderedItem);\n    const newTasks = { ...thisListTasks,\n      ...otherTasks\n    };\n    console.log(\"ðŸš€ ~ newTasks\", newTasks);\n    dispatch({\n      type: \"UPDATE_TASK_LIST\",\n      payload: newTasks\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: thisListTasks && thisListTasks.length > 0 ? /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: listType,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        className: \"task-list\",\n        children: [thisListTasks.map((t, index) => {\n          let delay = thisListTasks.indexOf(t) + 2;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: t.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(Task, {\n              delay: delay,\n              task: t,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              draggableRef: provided.innerRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 23\n            }, this)\n          }, t.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 19\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : listType === \"done\" ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"no-tasks\",\n      children: \"Nothing done today\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"no-tasks\",\n      children: \"No tasks added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskList, \"Zwuf4UKY9N9osX9ikp9JO339SnE=\");\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/components/TaskList/TaskList.js"],"names":["React","useContext","DragDropContext","Droppable","Draggable","Task","TasksContext","TaskList","props","listType","dispatch","state","tasks","thisListTasks","filter","t","type","otherTasks","handleDragEnd","result","reorderedItem","splice","source","index","destination","newTasks","console","log","payload","length","provided","innerRef","droppableProps","map","delay","indexOf","id","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nimport \"./TaskList.css\";\nimport Task from \"../Task/Task\";\nimport { TasksContext } from \"../../context/context\";\n\nconst TaskList = (props) => {\n  const { listType } = props;\n  const { dispatch, state } = useContext(TasksContext);\n  let { tasks } = state;\n  const thisListTasks = tasks.filter((t) => t.type === listType);\n  const otherTasks = tasks.filter((t) => t.type !== listType);\n\n  function handleDragEnd(result) {\n    const [reorderedItem] = thisListTasks.splice(result.source.index, 1);\n    thisListTasks.splice(result.destination.index, 0, reorderedItem);\n\n    const newTasks = { ...thisListTasks, ...otherTasks };\n    console.log(\"ðŸš€ ~ newTasks\", newTasks);\n\n    dispatch({ type: \"UPDATE_TASK_LIST\", payload: newTasks });\n  }\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      {thisListTasks && thisListTasks.length > 0 ? (\n        <Droppable droppableId={listType}>\n          {(provided) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"task-list\"\n            >\n              {thisListTasks.map((t, index) => {\n                let delay = thisListTasks.indexOf(t) + 2;\n                return (\n                  <Draggable key={t.id} draggableId={t.id} index={index}>\n                    {(provided) => (\n                      <Task\n                        delay={delay}\n                        task={t}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        draggableRef={provided.innerRef}\n                      />\n                    )}\n                  </Draggable>\n                );\n              })}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      ) : listType === \"done\" ? (\n        <h3 className=\"no-tasks\">Nothing done today</h3>\n      ) : (\n        <h3 className=\"no-tasks\">No tasks added</h3>\n      )}\n    </DragDropContext>\n  );\n};\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}