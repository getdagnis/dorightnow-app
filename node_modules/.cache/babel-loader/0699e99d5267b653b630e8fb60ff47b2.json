{"ast":null,"code":"import { ADD_TASK, DELETE_TASK, EDIT_TASK } from \"./actions\";\nimport { fetchedTasks } from \"./tasks\";\nconst initialState = {\n  tasks: fetchedTasks,\n  user: \"dagnis\"\n};\n\nconst taskReducer = (state = initialState, action) => {\n  let updatedTasks;\n  let updatedTaskIndex;\n\n  switch (action.type) {\n    case ADD_TASK:\n      updatedTasks = [...state.tasks];\n      updatedTaskIndex = updatedTasks.findIndex(t => t.id === action.payload.id);\n\n      if (updatedTaskIndex < 0) {\n        updatedTasks.push({ ...action.payload,\n          quantity: 1\n        });\n      } else {\n        const updatedTask = { ...updatedTasks[updatedTaskIndex]\n        };\n        updatedTask.quantity++;\n        updatedTasks[updatedTaskIndex] = updatedTask;\n      }\n\n      return { ...state,\n        tasks: updatedTasks\n      };\n\n    case DELETE_TASK:\n      updatedTasks = [...state.tasks];\n      updatedTaskIndex = updatedTasks.findIndex(t => t.id === action.payload);\n      const updatedTask = { ...updatedTasks[updatedTaskIndex]\n      };\n      updatedTask.quantity--;\n\n      if (updatedTask.quantity <= 0) {\n        updatedTasks.splice(updatedTaskIndex, 1);\n      } else {\n        updatedTasks[updatedTaskIndex] = updatedTask;\n      }\n\n      return { ...state,\n        tasks: updatedTasks\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default taskReducer;","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/reducer/reducers.js"],"names":["ADD_TASK","DELETE_TASK","EDIT_TASK","fetchedTasks","initialState","tasks","user","taskReducer","state","action","updatedTasks","updatedTaskIndex","type","findIndex","t","id","payload","push","quantity","updatedTask","splice"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,WAAjD;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEF,YADY;AAEnBG,EAAAA,IAAI,EAAE;AAFa,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,MAAIC,YAAJ;AACA,MAAIC,gBAAJ;;AACA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAKZ,QAAL;AACEU,MAAAA,YAAY,GAAG,CAAC,GAAGF,KAAK,CAACH,KAAV,CAAf;AACAM,MAAAA,gBAAgB,GAAGD,YAAY,CAACG,SAAb,CAChBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAAP,CAAeD,EADd,CAAnB;;AAIA,UAAIJ,gBAAgB,GAAG,CAAvB,EAA0B;AACxBD,QAAAA,YAAY,CAACO,IAAb,CAAkB,EAAE,GAAGR,MAAM,CAACO,OAAZ;AAAqBE,UAAAA,QAAQ,EAAE;AAA/B,SAAlB;AACD,OAFD,MAEO;AACL,cAAMC,WAAW,GAAG,EAClB,GAAGT,YAAY,CAACC,gBAAD;AADG,SAApB;AAGAQ,QAAAA,WAAW,CAACD,QAAZ;AACAR,QAAAA,YAAY,CAACC,gBAAD,CAAZ,GAAiCQ,WAAjC;AACD;;AACD,aAAO,EAAE,GAAGX,KAAL;AAAYH,QAAAA,KAAK,EAAEK;AAAnB,OAAP;;AAEF,SAAKT,WAAL;AACES,MAAAA,YAAY,GAAG,CAAC,GAAGF,KAAK,CAACH,KAAV,CAAf;AACAM,MAAAA,gBAAgB,GAAGD,YAAY,CAACG,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAA9C,CAAnB;AAEA,YAAMG,WAAW,GAAG,EAClB,GAAGT,YAAY,CAACC,gBAAD;AADG,OAApB;AAGAQ,MAAAA,WAAW,CAACD,QAAZ;;AACA,UAAIC,WAAW,CAACD,QAAZ,IAAwB,CAA5B,EAA+B;AAC7BR,QAAAA,YAAY,CAACU,MAAb,CAAoBT,gBAApB,EAAsC,CAAtC;AACD,OAFD,MAEO;AACLD,QAAAA,YAAY,CAACC,gBAAD,CAAZ,GAAiCQ,WAAjC;AACD;;AAED,aAAO,EAAE,GAAGX,KAAL;AAAYH,QAAAA,KAAK,EAAEK;AAAnB,OAAP;;AACF;AACE,aAAOF,KAAP;AAlCJ;AAoCD,CAvCD;;AAyCA,eAAeD,WAAf","sourcesContent":["import { ADD_TASK, DELETE_TASK, EDIT_TASK } from \"./actions\";\nimport { fetchedTasks } from \"./tasks\";\n\nconst initialState = {\n  tasks: fetchedTasks,\n  user: \"dagnis\",\n};\n\nconst taskReducer = (state = initialState, action) => {\n  let updatedTasks;\n  let updatedTaskIndex;\n  switch (action.type) {\n    case ADD_TASK:\n      updatedTasks = [...state.tasks];\n      updatedTaskIndex = updatedTasks.findIndex(\n        (t) => t.id === action.payload.id\n      );\n\n      if (updatedTaskIndex < 0) {\n        updatedTasks.push({ ...action.payload, quantity: 1 });\n      } else {\n        const updatedTask = {\n          ...updatedTasks[updatedTaskIndex],\n        };\n        updatedTask.quantity++;\n        updatedTasks[updatedTaskIndex] = updatedTask;\n      }\n      return { ...state, tasks: updatedTasks };\n\n    case DELETE_TASK:\n      updatedTasks = [...state.tasks];\n      updatedTaskIndex = updatedTasks.findIndex((t) => t.id === action.payload);\n\n      const updatedTask = {\n        ...updatedTasks[updatedTaskIndex],\n      };\n      updatedTask.quantity--;\n      if (updatedTask.quantity <= 0) {\n        updatedTasks.splice(updatedTaskIndex, 1);\n      } else {\n        updatedTasks[updatedTaskIndex] = updatedTask;\n      }\n\n      return { ...state, tasks: updatedTasks };\n    default:\n      return state;\n  }\n};\n\nexport default taskReducer;\n"]},"metadata":{},"sourceType":"module"}