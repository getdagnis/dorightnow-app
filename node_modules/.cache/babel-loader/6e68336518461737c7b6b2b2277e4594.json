{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dagnis/Documents/Github/dorightnow-app/src/components/MainTask/MainTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { Animated } from \"react-animated-css\"; // import Countdown from \"react-countdown\";\n\nimport ReactStopwatch from \"react-stopwatch\";\nimport { TasksContext } from \"../../context/context\";\nimport \"./MainTask.css\";\nimport \"./MainTask.anim.css\";\nimport ButtonSmall from \"../ButtonSmall/ButtonSmall\";\n\nfunction MainTask(props) {\n  _s();\n\n  const {\n    mainTask,\n    taskSize\n  } = props;\n  const {\n    state,\n    dispatch\n  } = useContext(TasksContext);\n  const {\n    mainTaskMovement\n  } = state;\n  const [isMainTaskVisible, setIsMainTaskVisible] = useState(true);\n  const [mainTaskAnim, setMainTaskAnim] = useState({\n    anim: \"mainTaskDoneSimple\",\n    duration: 1200\n  }); // EXPAND MAIN TASK INTO NOTES\n\n  const [notesVisible] = useState(false); // classList = notesVisible\n  // ? classList.concat(\" main-task-with-notes\")\n  // : classList;\n\n  let classList = \"main-task \" + taskSize;\n  classList = mainTask.color !== \"0\" ? classList.concat(\" main-task-color-\" + mainTask.color) : classList;\n  const mainBtnColor = \"xxl-done btn-\" + mainTask.color;\n  const motivationColor = \"motivation-block motiv-\" + mainTask.color;\n\n  switch (mainTaskMovement) {\n    case \"in\":\n      classList = classList.concat(\" mainTaskIn\");\n      break;\n\n    case \"done\":\n      classList = classList.concat(\" mainTaskDone\");\n      break;\n\n    case \"out\":\n      classList = classList.concat(\" mainTaskOut\");\n      break;\n\n    default:\n      return null;\n  }\n\n  const Completionist = () => /*#__PURE__*/_jsxDEV(\"span\", {\n    children: \"You missed the deadline!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 31\n  }, this); // const countdownRenderer = ({ hours, minutes, seconds, completed }) => {\n  //   if (completed) {\n  //     // Render a completed state\n  //     return <Completionist />;\n  //   } else {\n  //     // Render a countdown\n  //     return (\n  //       <div className=\"countdown\">\n  //         <span className=\"countdown-units\">{hours}h</span>\n  //         <span className=\"countdown-units\">{minutes}m</span>\n  //         <span className=\"countdown-units\">{seconds}s</span>\n  //       </div>\n  //     );\n  //   }\n  // };\n\n\n  const Stopwatch = () => /*#__PURE__*/_jsxDEV(ReactStopwatch, {\n    seconds: 0,\n    minutes: 0,\n    hours: 0 // limit=\"00:00:10\"\n    ,\n    onChange: ({\n      hours,\n      minutes,\n      seconds\n    }) => {// const localCounterData = localStorage.getItem(\"counterData\")\n      //   ? localStorage.getItem(\"counterData\")\n      //   : null;\n      // localCounterData &&\n      // (localCounterData.minutes > 0 || localCounterData.hours > 0)\n      //   ? console.log(\"local hours\", localCounterData.minutes)\n      //   : console.log(\"empty local storage\");\n      // const counterData = {\n      //   id: mainTask.id,\n      //   hours: hours,\n      //   minutes: minutes,\n      // };\n      // console.log(\"counterData\", {\n      //   id: mainTask.id,\n      //   hours: hours,\n      //   minutes: minutes,\n      // });\n    },\n    onCallback: () => console.log(\"Finish\"),\n    render: ({\n      formatted,\n      hours,\n      minutes,\n      seconds\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"countdown-units\",\n          children: [hours, \"h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"countdown-units\",\n          children: [minutes, \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"countdown-units\",\n          children: [seconds, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-task-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-task-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"main-task-h1\",\n        children: \"do right now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"empty-h3 main-task-h3\",\n        children: \"(because you can only do one important thing at a time)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-task-with-btns\",\n        children: [/*#__PURE__*/_jsxDEV(Animated, {\n          animationOut: mainTaskAnim.anim,\n          animationOutDuration: mainTaskAnim.duration,\n          isVisible: isMainTaskVisible,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notes-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classList,\n              onClick: () => {\n                // setNotesVisible(!notesVisible);\n                const time = new Date().getTime();\n                console.log(\"time\", time);\n                dispatch({\n                  type: \"HIDE_LEFT_SIDE\",\n                  payload: \"toggle\"\n                });\n                dispatch({\n                  type: \"HIDE_RIGHT_SIDE\",\n                  payload: \"toggle\"\n                });\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: mainTask.task\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: notesVisible ? \"main-task-notes\" : \"main-task-notes notes-visible\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"notes-contents\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  className: \"subtask-h4\",\n                  children: \"+ Add a new subtask... (doesn't work yet)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: notesVisible ? \"main-btns-hide\" : \"main-btns-show\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main-task-btns\",\n            children: [/*#__PURE__*/_jsxDEV(ButtonSmall, {\n              onClick: () => {\n                setMainTaskAnim({\n                  anim: \"mainTaskOut\",\n                  duration: 1500\n                });\n                setIsMainTaskVisible(false);\n                setTimeout(() => {\n                  dispatch({\n                    type: \"CLEAR_MAIN_TASK\"\n                  });\n                }, 1450);\n                setTimeout(() => {\n                  dispatch({\n                    type: \"HIDE_LEFT_SIDE\",\n                    payload: \"show\"\n                  });\n                  dispatch({\n                    type: \"HIDE_RIGHT_SIDE\",\n                    payload: \"show\"\n                  });\n                }, 1500);\n              },\n              size: \"extra-large\",\n              color: \"xxl-grey give-up-btn\",\n              title: \"give up\",\n              mainColor: mainTask.color\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ButtonSmall, {\n              onClick: () => {\n                setMainTaskAnim({\n                  anim: \"mainTaskDoneSimple\",\n                  duration: 1400\n                });\n                setIsMainTaskVisible(false);\n                setTimeout(() => {\n                  dispatch({\n                    type: \"MAIN_TASK_DONE\",\n                    payload: {\n                      taskId: mainTask.id,\n                      action: \"done\"\n                    }\n                  });\n                }, 1100);\n                setTimeout(() => {\n                  dispatch({\n                    type: \"HIDE_LEFT_SIDE\",\n                    payload: \"show\"\n                  });\n                  dispatch({\n                    type: \"HIDE_RIGHT_SIDE\",\n                    payload: \"show\"\n                  });\n                }, 1100);\n              },\n              size: \"extra-large\",\n              color: mainBtnColor,\n              title: \"done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-task-bottom\",\n      children: [mainTask.motivation ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"motivation-main\",\n        children: [\"This is what you will get when you finish:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: motivationColor,\n          children: mainTask.motivation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this) : null, \"Time spent so far (hopefully working):\", /*#__PURE__*/_jsxDEV(Stopwatch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MainTask, \"2448x40OQl2vN0eUvneZwL510YQ=\");\n\n_c = MainTask;\nexport default MainTask; // <Countdown\n//   className=\"countdown\"\n//   date={Date.now() + 900000}\n//   renderer={countdownRenderer}\n//   controlled={false}\n// />\n\nvar _c;\n\n$RefreshReg$(_c, \"MainTask\");","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/components/MainTask/MainTask.js"],"names":["React","useContext","useState","Animated","ReactStopwatch","TasksContext","ButtonSmall","MainTask","props","mainTask","taskSize","state","dispatch","mainTaskMovement","isMainTaskVisible","setIsMainTaskVisible","mainTaskAnim","setMainTaskAnim","anim","duration","notesVisible","classList","color","concat","mainBtnColor","motivationColor","Completionist","Stopwatch","hours","minutes","seconds","console","log","formatted","time","Date","getTime","type","payload","task","setTimeout","taskId","id","action","motivation"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { Animated } from \"react-animated-css\";\n// import Countdown from \"react-countdown\";\nimport ReactStopwatch from \"react-stopwatch\";\n\nimport { TasksContext } from \"../../context/context\";\n\nimport \"./MainTask.css\";\nimport \"./MainTask.anim.css\";\nimport ButtonSmall from \"../ButtonSmall/ButtonSmall\";\n\nfunction MainTask(props) {\n  const { mainTask, taskSize } = props;\n  const { state, dispatch } = useContext(TasksContext);\n  const { mainTaskMovement } = state;\n  const [isMainTaskVisible, setIsMainTaskVisible] = useState(true);\n  const [mainTaskAnim, setMainTaskAnim] = useState({\n    anim: \"mainTaskDoneSimple\",\n    duration: 1200,\n  });\n\n  // EXPAND MAIN TASK INTO NOTES\n  const [notesVisible] = useState(false);\n  // classList = notesVisible\n  // ? classList.concat(\" main-task-with-notes\")\n  // : classList;\n\n  let classList = \"main-task \" + taskSize;\n  classList =\n    mainTask.color !== \"0\"\n      ? classList.concat(\" main-task-color-\" + mainTask.color)\n      : classList;\n\n  const mainBtnColor = \"xxl-done btn-\" + mainTask.color;\n\n  const motivationColor = \"motivation-block motiv-\" + mainTask.color;\n\n  switch (mainTaskMovement) {\n    case \"in\":\n      classList = classList.concat(\" mainTaskIn\");\n      break;\n    case \"done\":\n      classList = classList.concat(\" mainTaskDone\");\n      break;\n    case \"out\":\n      classList = classList.concat(\" mainTaskOut\");\n      break;\n    default:\n      return null;\n  }\n\n  const Completionist = () => <span>You missed the deadline!</span>;\n\n  // const countdownRenderer = ({ hours, minutes, seconds, completed }) => {\n  //   if (completed) {\n  //     // Render a completed state\n  //     return <Completionist />;\n  //   } else {\n  //     // Render a countdown\n  //     return (\n  //       <div className=\"countdown\">\n  //         <span className=\"countdown-units\">{hours}h</span>\n  //         <span className=\"countdown-units\">{minutes}m</span>\n  //         <span className=\"countdown-units\">{seconds}s</span>\n  //       </div>\n  //     );\n  //   }\n  // };\n\n  const Stopwatch = () => (\n    <ReactStopwatch\n      seconds={0}\n      minutes={0}\n      hours={0}\n      // limit=\"00:00:10\"\n      onChange={({ hours, minutes, seconds }) => {\n        // const localCounterData = localStorage.getItem(\"counterData\")\n        //   ? localStorage.getItem(\"counterData\")\n        //   : null;\n        // localCounterData &&\n        // (localCounterData.minutes > 0 || localCounterData.hours > 0)\n        //   ? console.log(\"local hours\", localCounterData.minutes)\n        //   : console.log(\"empty local storage\");\n        // const counterData = {\n        //   id: mainTask.id,\n        //   hours: hours,\n        //   minutes: minutes,\n        // };\n        // console.log(\"counterData\", {\n        //   id: mainTask.id,\n        //   hours: hours,\n        //   minutes: minutes,\n        // });\n      }}\n      onCallback={() => console.log(\"Finish\")}\n      render={({ formatted, hours, minutes, seconds }) => {\n        return (\n          <div className=\"countdown\">\n            <span className=\"countdown-units\">{hours}h</span>\n            <span className=\"countdown-units\">{minutes}m</span>\n            <span className=\"countdown-units\">{seconds}s</span>\n          </div>\n        );\n      }}\n    />\n  );\n\n  return (\n    <div className=\"main-task-wrapper\">\n      <div className=\"main-task-top\">\n        <h1 className=\"main-task-h1\">do right now</h1>\n        <h3 className=\"empty-h3 main-task-h3\">\n          (because you can only do one important thing at a time)\n        </h3>\n        <div className=\"main-task-with-btns\">\n          <Animated\n            animationOut={mainTaskAnim.anim}\n            animationOutDuration={mainTaskAnim.duration}\n            isVisible={isMainTaskVisible}\n          >\n            <div className=\"notes-container\">\n              <div\n                className={classList}\n                onClick={() => {\n                  // setNotesVisible(!notesVisible);\n                  const time = new Date().getTime();\n                  console.log(\"time\", time);\n                  dispatch({\n                    type: \"HIDE_LEFT_SIDE\",\n                    payload: \"toggle\",\n                  });\n                  dispatch({\n                    type: \"HIDE_RIGHT_SIDE\",\n                    payload: \"toggle\",\n                  });\n                }}\n              >\n                <p>{mainTask.task}</p>\n              </div>\n              <div\n                className={\n                  notesVisible\n                    ? \"main-task-notes\"\n                    : \"main-task-notes notes-visible\"\n                }\n              >\n                <div className=\"notes-contents\">\n                  <h4 className=\"subtask-h4\">\n                    + Add a new subtask... (doesn't work yet)\n                  </h4>\n                </div>\n              </div>\n            </div>\n          </Animated>\n          <div className={notesVisible ? \"main-btns-hide\" : \"main-btns-show\"}>\n            <div className=\"main-task-btns\">\n              <ButtonSmall\n                onClick={() => {\n                  setMainTaskAnim({\n                    anim: \"mainTaskOut\",\n                    duration: 1500,\n                  });\n                  setIsMainTaskVisible(false);\n                  setTimeout(() => {\n                    dispatch({\n                      type: \"CLEAR_MAIN_TASK\",\n                    });\n                  }, 1450);\n                  setTimeout(() => {\n                    dispatch({\n                      type: \"HIDE_LEFT_SIDE\",\n                      payload: \"show\",\n                    });\n                    dispatch({\n                      type: \"HIDE_RIGHT_SIDE\",\n                      payload: \"show\",\n                    });\n                  }, 1500);\n                }}\n                size=\"extra-large\"\n                color=\"xxl-grey give-up-btn\"\n                title=\"give up\"\n                mainColor={mainTask.color}\n              />\n              {\n                // TODO LOCK THIS TASK button!!!\n              }\n              {\n                // TODO Main task edit button will not work here as edit task window\n                // is currently launched from leftside component\n                // Need to movie the edit task component outside and assign a router to it!\n                // <ButtonSmall\n                //   onClick={() => {\n                //     dispatch({\n                //       type: \"UPDATE_TASK\",\n                //       payload: { taskId: mainTask.id },\n                //     });\n                //   }}\n                //   size=\"extra-large\"\n                //   color=\"xxl-grey\"\n                //   title=\"edit\"\n                //   mainColor={mainTask.color}\n                // />\n              }\n              <ButtonSmall\n                onClick={() => {\n                  setMainTaskAnim({\n                    anim: \"mainTaskDoneSimple\",\n                    duration: 1400,\n                  });\n                  setIsMainTaskVisible(false);\n                  setTimeout(() => {\n                    dispatch({\n                      type: \"MAIN_TASK_DONE\",\n                      payload: { taskId: mainTask.id, action: \"done\" },\n                    });\n                  }, 1100);\n                  setTimeout(() => {\n                    dispatch({\n                      type: \"HIDE_LEFT_SIDE\",\n                      payload: \"show\",\n                    });\n                    dispatch({\n                      type: \"HIDE_RIGHT_SIDE\",\n                      payload: \"show\",\n                    });\n                  }, 1100);\n                }}\n                size=\"extra-large\"\n                color={mainBtnColor}\n                title=\"done\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"main-task-bottom\">\n        {mainTask.motivation ? (\n          <div className=\"motivation-main\">\n            This is what you will get when you finish:\n            <div className={motivationColor}>{mainTask.motivation}</div>\n          </div>\n        ) : null}\n        Time spent so far (hopefully working):\n        <Stopwatch />\n      </div>\n    </div>\n  );\n}\n\nexport default MainTask;\n\n// <Countdown\n//   className=\"countdown\"\n//   date={Date.now() + 900000}\n//   renderer={countdownRenderer}\n//   controlled={false}\n// />\n"]},"metadata":{},"sourceType":"module"}