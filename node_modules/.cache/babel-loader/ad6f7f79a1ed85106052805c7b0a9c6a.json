{"ast":null,"code":"import uuid from \"uuid\";\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_TASK\":\n      const newTask = {\n        id: uuid.v4(),\n        task: action.payload.task,\n        type: \"todo\",\n        category: action.payload.category,\n        motivation: action.payload.motivation,\n        color: action.payload.color,\n        list: action.payload.list || \"today\",\n        timeAdded: action.payload.timeAdded,\n        timeSpent: {\n          hours: 0,\n          minutes: 0\n        }\n      };\n      const addedTasks = [...state.tasks, newTask];\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(addedTasks));\n      return { ...state,\n        tasks: addedTasks\n      };\n\n    case \"UPDATE_TASK\":\n      const updatedTasksIndex = state.tasks.findIndex(t => t.id === action.payload.taskId);\n      const currentTask = state.tasks[updatedTasksIndex];\n      currentTask.task = action.payload.data.task.length > 0 ? action.payload.data.task : currentTask.task;\n      currentTask.motivation = action.payload.data.motivation.length > 0 ? action.payload.data.motivation : currentTask.motivation;\n      currentTask.color = action.payload.data.color.length > 0 ? action.payload.data.color : currentTask.color;\n      currentTask.category = action.payload.data.category.length > 0 ? action.payload.data.category : currentTask.category;\n      const updatedTasks = [...state.tasks.slice(0, updatedTasksIndex), currentTask, ...state.tasks.slice(updatedTasksIndex + 1)];\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(updatedTasks));\n      return { ...state,\n        tasks: updatedTasks\n      };\n\n    case \"UPDATE_TASK_LIST\":\n      const incomingTasks = action.payload;\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(incomingTasks));\n      return { ...state,\n        tasks: incomingTasks\n      };\n\n    case \"DELETE_TASK\":\n      const nondeletedTasks = state.tasks.filter(t => t.id !== action.payload);\n      const deletedTask = state.tasks.filter(t => t.id === action.payload)[0];\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(nondeletedTasks));\n      localStorage.setItem(\"deletedTask\", JSON.stringify(deletedTask));\n      return { ...state,\n        tasks: nondeletedTasks,\n        deletedTask: deletedTask,\n        justDeleted: true\n      };\n\n    case \"UNDELETE_TASK\":\n      const lastDeletedTask = state.deletedTask;\n      const restoredTasks = [...state.tasks, lastDeletedTask];\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(restoredTasks));\n      return { ...state,\n        tasks: restoredTasks,\n        justDeleted: false\n      };\n\n    case \"REMOVE_JUSTDELETED\":\n      return { ...state,\n        justDeleted: false\n      };\n\n    case \"SET_MAIN_TASK\":\n      const currentTaskId = action.payload;\n      localStorage.setItem(\"mainTask\", JSON.stringify(currentTaskId));\n      return { ...state,\n        mainTaskMovement: \"in\",\n        currentTask: currentTaskId\n      };\n\n    case \"CLEAR_MAIN_TASK\":\n      let currentTaskTemporary = action.payload === \"keep\" ? state.currentTask : null;\n      return { ...state,\n        currentTask: currentTaskTemporary,\n        mainTaskMovement: \"out\"\n      };\n\n    case \"MAIN_TASK_DONE\":\n      let newTasks = [];\n\n      if (action.payload.action === \"done\" || action.payload.action === \"todo\") {\n        const newType = action.payload.action;\n        const thisTaskIndex = state.tasks.findIndex(t => t.id === action.payload.taskId);\n        let mainTaskDone = state.tasks[thisTaskIndex];\n        mainTaskDone.type = newType;\n        localStorage.setItem(\"dorightnowTasks\", JSON.stringify(state.tasks));\n        newTasks = [...state.tasks.slice(0, thisTaskIndex), ...state.tasks.slice(thisTaskIndex + 1), mainTaskDone];\n      }\n\n      localStorage.setItem(\"mainTask\", JSON.stringify(null));\n      return { ...state,\n        tasks: newTasks.length > 0 ? newTasks : state.tasks,\n        mainTaskMovement: \"done\",\n        currentTask: null\n      };\n\n    case \"HIDE_LEFT_SIDE\":\n      let newLeftHideSate = \"\";\n\n      switch (action.payload) {\n        case \"hide\":\n          newLeftHideSate = true;\n          break;\n\n        case \"show\":\n          newLeftHideSate = false;\n          break;\n\n        case \"toggle\":\n          newLeftHideSate = !state.hideLeftSide;\n          break;\n\n        default:\n          newLeftHideSate = false;\n      }\n\n      return { ...state,\n        hideLeftSide: newLeftHideSate\n      };\n\n    case \"HIDE_RIGHT_SIDE\":\n      let newRightHideSate = \"\";\n\n      switch (action.payload) {\n        case \"hide\":\n          newRightHideSate = true;\n          break;\n\n        case \"show\":\n          newRightHideSate = false;\n          break;\n\n        case \"toggle\":\n          newRightHideSate = !state.hideRightSide;\n          break;\n\n        default:\n          newRightHideSate = false;\n      }\n\n      return { ...state,\n        hideRightSide: newRightHideSate\n      };\n\n    case \"SET_LAST_COLOR\":\n      return { ...state,\n        lastColor: action.payload\n      };\n\n    case \"SET_LAST_CATEGORY\":\n      return { ...state,\n        lastCategory: action.payload\n      };\n    // DEV USE ONLY\n\n    case \"CLEAN_CORRUPT_TASKS\":\n      const cleanedTasks = state.tasks.filter(t => t.id && t.id.length > 1);\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(cleanedTasks));\n      return { ...state,\n        tasks: cleanedTasks\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/dagnis/Documents/Github/dorightnow-app/src/context/reducer.js"],"names":["uuid","reducer","state","action","type","newTask","id","v4","task","payload","category","motivation","color","list","timeAdded","timeSpent","hours","minutes","addedTasks","tasks","localStorage","setItem","JSON","stringify","updatedTasksIndex","findIndex","t","taskId","currentTask","data","length","updatedTasks","slice","incomingTasks","nondeletedTasks","filter","deletedTask","justDeleted","lastDeletedTask","restoredTasks","currentTaskId","mainTaskMovement","currentTaskTemporary","newTasks","newType","thisTaskIndex","mainTaskDone","newLeftHideSate","hideLeftSide","newRightHideSate","hideRightSide","lastColor","lastCategory","cleanedTasks"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEN,IAAI,CAACO,EAAL,EADU;AAEdC,QAAAA,IAAI,EAAEL,MAAM,CAACM,OAAP,CAAeD,IAFP;AAGdJ,QAAAA,IAAI,EAAE,MAHQ;AAIdM,QAAAA,QAAQ,EAAEP,MAAM,CAACM,OAAP,CAAeC,QAJX;AAKdC,QAAAA,UAAU,EAAER,MAAM,CAACM,OAAP,CAAeE,UALb;AAMdC,QAAAA,KAAK,EAAET,MAAM,CAACM,OAAP,CAAeG,KANR;AAOdC,QAAAA,IAAI,EAAEV,MAAM,CAACM,OAAP,CAAeI,IAAf,IAAuB,OAPf;AAQdC,QAAAA,SAAS,EAAEX,MAAM,CAACM,OAAP,CAAeK,SARZ;AASdC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAT;AAAYC,UAAAA,OAAO,EAAE;AAArB;AATG,OAAhB;AAYA,YAAMC,UAAU,GAAG,CAAC,GAAGhB,KAAK,CAACiB,KAAV,EAAiBd,OAAjB,CAAnB;AAEAe,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAAxC;AAEA,aAAO,EACL,GAAGhB,KADE;AAELiB,QAAAA,KAAK,EAAED;AAFF,OAAP;;AAKF,SAAK,aAAL;AACE,YAAMM,iBAAiB,GAAGtB,KAAK,CAACiB,KAAN,CAAYM,SAAZ,CACvBC,CAAD,IAAOA,CAAC,CAACpB,EAAF,KAASH,MAAM,CAACM,OAAP,CAAekB,MADP,CAA1B;AAGA,YAAMC,WAAW,GAAG1B,KAAK,CAACiB,KAAN,CAAYK,iBAAZ,CAApB;AACAI,MAAAA,WAAW,CAACpB,IAAZ,GACEL,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBrB,IAApB,CAAyBsB,MAAzB,GAAkC,CAAlC,GACI3B,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBrB,IADxB,GAEIoB,WAAW,CAACpB,IAHlB;AAIAoB,MAAAA,WAAW,CAACjB,UAAZ,GACER,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBlB,UAApB,CAA+BmB,MAA/B,GAAwC,CAAxC,GACI3B,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBlB,UADxB,GAEIiB,WAAW,CAACjB,UAHlB;AAIAiB,MAAAA,WAAW,CAAChB,KAAZ,GACET,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBjB,KAApB,CAA0BkB,MAA1B,GAAmC,CAAnC,GACI3B,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBjB,KADxB,GAEIgB,WAAW,CAAChB,KAHlB;AAIAgB,MAAAA,WAAW,CAAClB,QAAZ,GACEP,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBnB,QAApB,CAA6BoB,MAA7B,GAAsC,CAAtC,GACI3B,MAAM,CAACM,OAAP,CAAeoB,IAAf,CAAoBnB,QADxB,GAEIkB,WAAW,CAAClB,QAHlB;AAKA,YAAMqB,YAAY,GAAG,CACnB,GAAG7B,KAAK,CAACiB,KAAN,CAAYa,KAAZ,CAAkB,CAAlB,EAAqBR,iBAArB,CADgB,EAEnBI,WAFmB,EAGnB,GAAG1B,KAAK,CAACiB,KAAN,CAAYa,KAAZ,CAAkBR,iBAAiB,GAAG,CAAtC,CAHgB,CAArB;AAMAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeQ,YAAf,CAAxC;AAEA,aAAO,EACL,GAAG7B,KADE;AAELiB,QAAAA,KAAK,EAAEY;AAFF,OAAP;;AAKF,SAAK,kBAAL;AACE,YAAME,aAAa,GAAG9B,MAAM,CAACM,OAA7B;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeU,aAAf,CAAxC;AAEA,aAAO,EACL,GAAG/B,KADE;AAELiB,QAAAA,KAAK,EAAEc;AAFF,OAAP;;AAKF,SAAK,aAAL;AACE,YAAMC,eAAe,GAAGhC,KAAK,CAACiB,KAAN,CAAYgB,MAAZ,CACrBT,CAAD,IAAOA,CAAC,CAACpB,EAAF,KAASH,MAAM,CAACM,OADD,CAAxB;AAGA,YAAM2B,WAAW,GAAGlC,KAAK,CAACiB,KAAN,CAAYgB,MAAZ,CAAoBT,CAAD,IAAOA,CAAC,CAACpB,EAAF,KAASH,MAAM,CAACM,OAA1C,EAAmD,CAAnD,CAApB;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeW,eAAf,CAAxC;AACAd,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCC,IAAI,CAACC,SAAL,CAAea,WAAf,CAApC;AAEA,aAAO,EACL,GAAGlC,KADE;AAELiB,QAAAA,KAAK,EAAEe,eAFF;AAGLE,QAAAA,WAAW,EAAEA,WAHR;AAILC,QAAAA,WAAW,EAAE;AAJR,OAAP;;AAOF,SAAK,eAAL;AACE,YAAMC,eAAe,GAAGpC,KAAK,CAACkC,WAA9B;AACA,YAAMG,aAAa,GAAG,CAAC,GAAGrC,KAAK,CAACiB,KAAV,EAAiBmB,eAAjB,CAAtB;AACAlB,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAegB,aAAf,CAAxC;AAEA,aAAO,EACL,GAAGrC,KADE;AAELiB,QAAAA,KAAK,EAAEoB,aAFF;AAGLF,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAMF,SAAK,oBAAL;AACE,aAAO,EACL,GAAGnC,KADE;AAELmC,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAKF,SAAK,eAAL;AACE,YAAMG,aAAa,GAAGrC,MAAM,CAACM,OAA7B;AACAW,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeiB,aAAf,CAAjC;AAEA,aAAO,EACL,GAAGtC,KADE;AAELuC,QAAAA,gBAAgB,EAAE,IAFb;AAGLb,QAAAA,WAAW,EAAEY;AAHR,OAAP;;AAMF,SAAK,iBAAL;AACE,UAAIE,oBAAoB,GACtBvC,MAAM,CAACM,OAAP,KAAmB,MAAnB,GAA4BP,KAAK,CAAC0B,WAAlC,GAAgD,IADlD;AAGA,aAAO,EACL,GAAG1B,KADE;AAEL0B,QAAAA,WAAW,EAAEc,oBAFR;AAGLD,QAAAA,gBAAgB,EAAE;AAHb,OAAP;;AAMF,SAAK,gBAAL;AACE,UAAIE,QAAQ,GAAG,EAAf;;AAEA,UACExC,MAAM,CAACM,OAAP,CAAeN,MAAf,KAA0B,MAA1B,IACAA,MAAM,CAACM,OAAP,CAAeN,MAAf,KAA0B,MAF5B,EAGE;AACA,cAAMyC,OAAO,GAAGzC,MAAM,CAACM,OAAP,CAAeN,MAA/B;AACA,cAAM0C,aAAa,GAAG3C,KAAK,CAACiB,KAAN,CAAYM,SAAZ,CACnBC,CAAD,IAAOA,CAAC,CAACpB,EAAF,KAASH,MAAM,CAACM,OAAP,CAAekB,MADX,CAAtB;AAIA,YAAImB,YAAY,GAAG5C,KAAK,CAACiB,KAAN,CAAY0B,aAAZ,CAAnB;AACAC,QAAAA,YAAY,CAAC1C,IAAb,GAAoBwC,OAApB;AAEAxB,QAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAerB,KAAK,CAACiB,KAArB,CAAxC;AAEAwB,QAAAA,QAAQ,GAAG,CACT,GAAGzC,KAAK,CAACiB,KAAN,CAAYa,KAAZ,CAAkB,CAAlB,EAAqBa,aAArB,CADM,EAET,GAAG3C,KAAK,CAACiB,KAAN,CAAYa,KAAZ,CAAkBa,aAAa,GAAG,CAAlC,CAFM,EAGTC,YAHS,CAAX;AAKD;;AAED1B,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAe,IAAf,CAAjC;AAEA,aAAO,EACL,GAAGrB,KADE;AAELiB,QAAAA,KAAK,EAAEwB,QAAQ,CAACb,MAAT,GAAkB,CAAlB,GAAsBa,QAAtB,GAAiCzC,KAAK,CAACiB,KAFzC;AAGLsB,QAAAA,gBAAgB,EAAE,MAHb;AAILb,QAAAA,WAAW,EAAE;AAJR,OAAP;;AAOF,SAAK,gBAAL;AACE,UAAImB,eAAe,GAAG,EAAtB;;AACA,cAAQ5C,MAAM,CAACM,OAAf;AACE,aAAK,MAAL;AACEsC,UAAAA,eAAe,GAAG,IAAlB;AACA;;AACF,aAAK,MAAL;AACEA,UAAAA,eAAe,GAAG,KAAlB;AACA;;AACF,aAAK,QAAL;AACEA,UAAAA,eAAe,GAAG,CAAC7C,KAAK,CAAC8C,YAAzB;AACA;;AACF;AACED,UAAAA,eAAe,GAAG,KAAlB;AAXJ;;AAcA,aAAO,EACL,GAAG7C,KADE;AAEL8C,QAAAA,YAAY,EAAED;AAFT,OAAP;;AAKF,SAAK,iBAAL;AACE,UAAIE,gBAAgB,GAAG,EAAvB;;AACA,cAAQ9C,MAAM,CAACM,OAAf;AACE,aAAK,MAAL;AACEwC,UAAAA,gBAAgB,GAAG,IAAnB;AACA;;AACF,aAAK,MAAL;AACEA,UAAAA,gBAAgB,GAAG,KAAnB;AACA;;AACF,aAAK,QAAL;AACEA,UAAAA,gBAAgB,GAAG,CAAC/C,KAAK,CAACgD,aAA1B;AACA;;AACF;AACED,UAAAA,gBAAgB,GAAG,KAAnB;AAXJ;;AAcA,aAAO,EACL,GAAG/C,KADE;AAELgD,QAAAA,aAAa,EAAED;AAFV,OAAP;;AAKF,SAAK,gBAAL;AACE,aAAO,EAAE,GAAG/C,KAAL;AAAYiD,QAAAA,SAAS,EAAEhD,MAAM,CAACM;AAA9B,OAAP;;AAEF,SAAK,mBAAL;AACE,aAAO,EAAE,GAAGP,KAAL;AAAYkD,QAAAA,YAAY,EAAEjD,MAAM,CAACM;AAAjC,OAAP;AAEF;;AACA,SAAK,qBAAL;AACE,YAAM4C,YAAY,GAAGnD,KAAK,CAACiB,KAAN,CAAYgB,MAAZ,CAAoBT,CAAD,IAAOA,CAAC,CAACpB,EAAF,IAAQoB,CAAC,CAACpB,EAAF,CAAKwB,MAAL,GAAc,CAAhD,CAArB;AACAV,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAe8B,YAAf,CAAxC;AAEA,aAAO,EACL,GAAGnD,KADE;AAELiB,QAAAA,KAAK,EAAEkC;AAFF,OAAP;;AAIF;AACE,aAAOnD,KAAP;AAlNJ;AAoND","sourcesContent":["import uuid from \"uuid\";\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_TASK\":\n      const newTask = {\n        id: uuid.v4(),\n        task: action.payload.task,\n        type: \"todo\",\n        category: action.payload.category,\n        motivation: action.payload.motivation,\n        color: action.payload.color,\n        list: action.payload.list || \"today\",\n        timeAdded: action.payload.timeAdded,\n        timeSpent: { hours: 0, minutes: 0 },\n      };\n\n      const addedTasks = [...state.tasks, newTask];\n\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(addedTasks));\n\n      return {\n        ...state,\n        tasks: addedTasks,\n      };\n\n    case \"UPDATE_TASK\":\n      const updatedTasksIndex = state.tasks.findIndex(\n        (t) => t.id === action.payload.taskId\n      );\n      const currentTask = state.tasks[updatedTasksIndex];\n      currentTask.task =\n        action.payload.data.task.length > 0\n          ? action.payload.data.task\n          : currentTask.task;\n      currentTask.motivation =\n        action.payload.data.motivation.length > 0\n          ? action.payload.data.motivation\n          : currentTask.motivation;\n      currentTask.color =\n        action.payload.data.color.length > 0\n          ? action.payload.data.color\n          : currentTask.color;\n      currentTask.category =\n        action.payload.data.category.length > 0\n          ? action.payload.data.category\n          : currentTask.category;\n\n      const updatedTasks = [\n        ...state.tasks.slice(0, updatedTasksIndex),\n        currentTask,\n        ...state.tasks.slice(updatedTasksIndex + 1),\n      ];\n\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(updatedTasks));\n\n      return {\n        ...state,\n        tasks: updatedTasks,\n      };\n\n    case \"UPDATE_TASK_LIST\":\n      const incomingTasks = action.payload;\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(incomingTasks));\n\n      return {\n        ...state,\n        tasks: incomingTasks,\n      };\n\n    case \"DELETE_TASK\":\n      const nondeletedTasks = state.tasks.filter(\n        (t) => t.id !== action.payload\n      );\n      const deletedTask = state.tasks.filter((t) => t.id === action.payload)[0];\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(nondeletedTasks));\n      localStorage.setItem(\"deletedTask\", JSON.stringify(deletedTask));\n\n      return {\n        ...state,\n        tasks: nondeletedTasks,\n        deletedTask: deletedTask,\n        justDeleted: true,\n      };\n\n    case \"UNDELETE_TASK\":\n      const lastDeletedTask = state.deletedTask;\n      const restoredTasks = [...state.tasks, lastDeletedTask];\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(restoredTasks));\n\n      return {\n        ...state,\n        tasks: restoredTasks,\n        justDeleted: false,\n      };\n\n    case \"REMOVE_JUSTDELETED\":\n      return {\n        ...state,\n        justDeleted: false,\n      };\n\n    case \"SET_MAIN_TASK\":\n      const currentTaskId = action.payload;\n      localStorage.setItem(\"mainTask\", JSON.stringify(currentTaskId));\n\n      return {\n        ...state,\n        mainTaskMovement: \"in\",\n        currentTask: currentTaskId,\n      };\n\n    case \"CLEAR_MAIN_TASK\":\n      let currentTaskTemporary =\n        action.payload === \"keep\" ? state.currentTask : null;\n\n      return {\n        ...state,\n        currentTask: currentTaskTemporary,\n        mainTaskMovement: \"out\",\n      };\n\n    case \"MAIN_TASK_DONE\":\n      let newTasks = [];\n\n      if (\n        action.payload.action === \"done\" ||\n        action.payload.action === \"todo\"\n      ) {\n        const newType = action.payload.action;\n        const thisTaskIndex = state.tasks.findIndex(\n          (t) => t.id === action.payload.taskId\n        );\n\n        let mainTaskDone = state.tasks[thisTaskIndex];\n        mainTaskDone.type = newType;\n\n        localStorage.setItem(\"dorightnowTasks\", JSON.stringify(state.tasks));\n\n        newTasks = [\n          ...state.tasks.slice(0, thisTaskIndex),\n          ...state.tasks.slice(thisTaskIndex + 1),\n          mainTaskDone,\n        ];\n      }\n\n      localStorage.setItem(\"mainTask\", JSON.stringify(null));\n\n      return {\n        ...state,\n        tasks: newTasks.length > 0 ? newTasks : state.tasks,\n        mainTaskMovement: \"done\",\n        currentTask: null,\n      };\n\n    case \"HIDE_LEFT_SIDE\":\n      let newLeftHideSate = \"\";\n      switch (action.payload) {\n        case \"hide\":\n          newLeftHideSate = true;\n          break;\n        case \"show\":\n          newLeftHideSate = false;\n          break;\n        case \"toggle\":\n          newLeftHideSate = !state.hideLeftSide;\n          break;\n        default:\n          newLeftHideSate = false;\n      }\n\n      return {\n        ...state,\n        hideLeftSide: newLeftHideSate,\n      };\n\n    case \"HIDE_RIGHT_SIDE\":\n      let newRightHideSate = \"\";\n      switch (action.payload) {\n        case \"hide\":\n          newRightHideSate = true;\n          break;\n        case \"show\":\n          newRightHideSate = false;\n          break;\n        case \"toggle\":\n          newRightHideSate = !state.hideRightSide;\n          break;\n        default:\n          newRightHideSate = false;\n      }\n\n      return {\n        ...state,\n        hideRightSide: newRightHideSate,\n      };\n\n    case \"SET_LAST_COLOR\":\n      return { ...state, lastColor: action.payload };\n\n    case \"SET_LAST_CATEGORY\":\n      return { ...state, lastCategory: action.payload };\n\n    // DEV USE ONLY\n    case \"CLEAN_CORRUPT_TASKS\":\n      const cleanedTasks = state.tasks.filter((t) => t.id && t.id.length > 1);\n      localStorage.setItem(\"dorightnowTasks\", JSON.stringify(cleanedTasks));\n\n      return {\n        ...state,\n        tasks: cleanedTasks,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}